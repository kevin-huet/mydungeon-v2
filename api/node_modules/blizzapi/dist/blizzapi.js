"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var axios=require("axios");function _interopDefaultLegacy(e){return e&&typeof e=="object"&&"default"in e?e:{default:e}}var axios__default=_interopDefaultLegacy(axios);const startsWithSlash=e=>e[0]==="/",isLongEnough=e=>e.length>3,validators=[startsWithSlash,isLongEnough],endpointValidator=e=>validators.every(t=>t(e)),uriValidator=e=>/(?:http[s]?:\/\/)[^\s(["<,>]*\.[^\s[",><]*/gm.test(e);var __defProp$2=Object.defineProperty,__hasOwnProp$2=Object.prototype.hasOwnProperty,__getOwnPropSymbols$2=Object.getOwnPropertySymbols,__propIsEnum$2=Object.prototype.propertyIsEnumerable,__defNormalProp$2=(e,t,o)=>t in e?__defProp$2(e,t,{enumerable:!0,configurable:!0,writable:!0,value:o}):e[t]=o,__objSpread$2=(e,t)=>{for(var o in t||(t={}))__hasOwnProp$2.call(t,o)&&__defNormalProp$2(e,o,t[o]);if(__getOwnPropSymbols$2)for(var o of __getOwnPropSymbols$2(t))__propIsEnum$2.call(t,o)&&__defNormalProp$2(e,o,t[o]);return e},__async$5=(e,t,o)=>new Promise((n,s)=>{var c=r=>{try{a(o.next(r))}catch(i){s(i)}},l=r=>{try{a(o.throw(r))}catch(i){s(i)}},a=r=>r.done?n(r.value):Promise.resolve(r.value).then(c,l);a((o=o.apply(e,t)).next())});const fetchFromUri=e=>__async$5(this,null,function*(){const{uri:t,timeout:o,headers:n,params:s,data:c,auth:l}=e,a=e.method||"GET";if(!uriValidator(t))throw new RangeError(`'${t}' is not a valid parameter for fetchFromUri()`);const r=__objSpread$2(__objSpread$2(__objSpread$2(__objSpread$2({method:a,url:encodeURI(t),timeout:o||1e4},n&&{headers:n}),s&&{params:s}),l&&{auth:l}),c&&{data:c}),i=yield axios__default.default.request(r),d=i.headers["last-modified"]?i.headers["last-modified"]:null;return __objSpread$2(__objSpread$2({},i.data),d&&{lastModified:d})}),fetchAccessToken=e=>{const{oauthUri:t,clientId:o,clientSecret:n}=e;return fetchFromUri({data:"grant_type=client_credentials",auth:{username:o,password:n},uri:t,method:"POST"})},defaultLocales=Object.freeze({1:0,2:0,3:0,5:0}),locales=Object.freeze({1:Object.freeze(["en_US","es_MX","pt_BR"]),2:Object.freeze(["en_GB","es_ES","fr_FR","ru_RU","de_DE","pt_PT","it_IT"]),3:Object.freeze(["ko_KR","zh_TW"]),5:Object.freeze(["zh_CN"])}),regions=Object.freeze({1:Object.freeze(["us"]),2:Object.freeze(["eu"]),3:Object.freeze(["kr","tw"]),5:Object.freeze(["cn"])}),sc2Realms=Object.freeze({1:Object.freeze([1,2]),2:Object.freeze([1,2]),3:Object.freeze([1,2]),5:Object.freeze([1])}),hosts=Object.freeze({1:"https://us.api.blizzard.com",2:"https://eu.api.blizzard.com",3:["https://kr.api.blizzard.com","https://tw.api.blizzard.com/"],5:"https://gateway.battlenet.com.cn/"}),oAuthHosts=Object.freeze({1:"https://us.battle.net",2:"https://eu.battle.net",3:"https://apac.battle.net",5:"https://www.battlenet.com.cn"}),getRegionPropertyArray=e=>Object.freeze({1:`${oAuthHosts[1]}${e}`,2:`${oAuthHosts[2]}${e}`,3:`${oAuthHosts[3]}${e}`,5:`${oAuthHosts[5]}${e}`}),authorizeEndpoint="/oauth/authorize",tokenEndpoint="/oauth/token",checkTokenEndpoint="/oauth/check_token?token=",authorizeUris=getRegionPropertyArray(authorizeEndpoint),tokenUris=getRegionPropertyArray(tokenEndpoint),checkTokenUris=getRegionPropertyArray(checkTokenEndpoint),constants={REGIONS:regions,LOCALES:locales,DEFAULT_LOCALES:defaultLocales,SC2_REALMS:sc2Realms,REGION_API_HOSTS:hosts,OAUTH_AUTHORIZE_URIS:authorizeUris,OAUTH_TOKEN_URIS:tokenUris,OAUTH_CHECK_TOKEN_URIS:checkTokenUris},getAllRegions=()=>constants.REGIONS,getAllRegionIds=()=>Object.keys(constants.REGIONS).map(t=>parseInt(t,10)),getAllRegionNames=()=>{const e=Object.values(constants.REGIONS);return[].concat(...e).map(o=>o.toString())},getRegionNameById=e=>{const t=Object.keys(constants.REGIONS),o=e.toString();if(!t.includes(o))throw new RangeError(`${o} is not a valid parameter for getRegionNameById()`);return constants.REGIONS[o]},validateRegionId=e=>{try{return Boolean(getRegionNameById(e))}catch(t){return!1}},getRegionIdByName=e=>{const t=e.toLowerCase(),o=constants.REGIONS,s=Object.keys(o).filter(l=>o[l].includes(t)),c=Number(s[0])||!1;if(!c)throw new RangeError(`"${e}" is not a valid parameter for getRegionIdByName()`);return c},validateRegionName=e=>{try{return Boolean(getRegionIdByName(e))}catch(t){return!1}},getConstantByRegionId=(e,t)=>{const o=typeof e!="string"?e:e.toString();if(!validateRegionId(o))throw new RangeError(`${o} is not a valid parameter for getConstantByRegionId(${e}, '${t}')`);return constants[t][o]},getConstantByRegionName=(e,t)=>{if(!validateRegionName(e))throw new RangeError(`${e} is not a valid parameter for getConstantByRegionName(${e}, '${t}')`);const n=getRegionIdByName(e);return constants[t][n]},getConstantByRegion=(e,t)=>validateRegionId(e)?getConstantByRegionId(e,t):getConstantByRegionName(e.toString(),t),getAllLocales=()=>constants.LOCALES,getAllLocaleNames=()=>{const e=Object.values(constants.LOCALES);return[].concat(...e).map(n=>n.toString())},getLocalesByRegionId=e=>getConstantByRegionId(e,"LOCALES"),checkIfLocaleLooksValid=e=>/^(?:[a-z]{2}_[a-z]{2})$/gi.test(e),validateLocale=e=>{if(!checkIfLocaleLooksValid(e))throw new RangeError(`${e} is not a valid parameter for validateLocale()`);const o=getAllLocaleNames().map(s=>s.toLowerCase()),n=e.toLowerCase();return o.includes(n)},isLocaleValidForRegionId=(e,t)=>{const o=e.toLowerCase(),n=validateLocale(o)||!1,s=t.toString(),c=validateRegionId(s);if(!n)throw new RangeError(`${e} is not a valid locale parameter for isLocaleValidForRegionId()`);if(!c)throw new RangeError(`${t} is not a valid regionId parameter for isLocaleValidForRegionId()`);return getLocalesByRegionId(t).map(a=>a.toLowerCase()).includes(o)},getDefaultLocaleNameForRegionId=e=>{const t=e.toString();if(!validateRegionId(t))throw new RangeError(`${t} is not a valid parameter for getDefaultLocaleNameForRegionId()`);const n=constants.DEFAULT_LOCALES[t];return constants.LOCALES[e][n]},getAllDefaultLocaleNames=()=>{const e=getAllLocales(),t=Object.keys(e);return Object.assign({},...t.map(o=>({[o]:getDefaultLocaleNameForRegionId(o)})))},getAllSc2Realms=()=>constants.SC2_REALMS,getAllAvailableSc2Realms=()=>{const e=Object.values(constants.SC2_REALMS);return[].concat(...e).filter((o,n,s)=>n===s.indexOf(o))},getSc2RealmsByRegionId=e=>getConstantByRegionId(e,"SC2_REALMS"),checkIfSc2RealmLooksValid=e=>{const t=e.toString();return/^([1-9]{1})$/gi.test(t)},validateSc2Realm=e=>{if(!checkIfSc2RealmLooksValid(e))throw new RangeError(`${e} is not a valid parameter for validateSc2Realm()`);const o=getAllAvailableSc2Realms(),n=typeof e=="number"?e:parseInt(e,10);return o.includes(n)},isSc2RealmValidForRegionId=(e,t)=>{const o=checkIfSc2RealmLooksValid(e),n=t.toString(),s=validateRegionId(n);if(!o)throw new RangeError(`${e} is not a valid sc2Realm parameter for isSc2RealmValidForRegionId()`);if(!s)throw new RangeError(`${t} is not a valid regionId parameter for isSc2RealmValidForRegionId()`);const c=getSc2RealmsByRegionId(t),l=typeof e=="number"?e:parseInt(e,10);return c.includes(l)},getApiHostByRegion=e=>{const t=getConstantByRegion(e,"REGION_API_HOSTS");return typeof e=="string"&&e.toLowerCase()==="kr"?t[0]:typeof e=="string"&&e.toLowerCase()==="tw"?t[1]:t},getCheckTokenUriByRegion=e=>getConstantByRegion(e,"OAUTH_CHECK_TOKEN_URIS"),getTokenUriByRegion=e=>getConstantByRegion(e,"OAUTH_TOKEN_URIS");var __async$4=(e,t,o)=>new Promise((n,s)=>{var c=r=>{try{a(o.next(r))}catch(i){s(i)}},l=r=>{try{a(o.throw(r))}catch(i){s(i)}},a=r=>r.done?n(r.value):Promise.resolve(r.value).then(c,l);a((o=o.apply(e,t)).next())});const getAccessToken=e=>__async$4(this,null,function*(){const{region:t,clientId:o,clientSecret:n}=e,s=getTokenUriByRegion(t);return(yield fetchAccessToken({oauthUri:s,clientId:o,clientSecret:n})).access_token});var __async$3=(e,t,o)=>new Promise((n,s)=>{var c=r=>{try{a(o.next(r))}catch(i){s(i)}},l=r=>{try{a(o.throw(r))}catch(i){s(i)}},a=r=>r.done?n(r.value):Promise.resolve(r.value).then(c,l);a((o=o.apply(e,t)).next())});const validateAccessToken=(e,t)=>__async$3(this,null,function*(){try{const n=`${getCheckTokenUriByRegion(e)}${t}`,s=yield fetchFromUri({uri:n});return!(s.error&&s.error==="invalid_token")}catch(o){return!1}});var __defProp$1=Object.defineProperty,__hasOwnProp$1=Object.prototype.hasOwnProperty,__getOwnPropSymbols$1=Object.getOwnPropertySymbols,__propIsEnum$1=Object.prototype.propertyIsEnumerable,__defNormalProp$1=(e,t,o)=>t in e?__defProp$1(e,t,{enumerable:!0,configurable:!0,writable:!0,value:o}):e[t]=o,__objSpread$1=(e,t)=>{for(var o in t||(t={}))__hasOwnProp$1.call(t,o)&&__defNormalProp$1(e,o,t[o]);if(__getOwnPropSymbols$1)for(var o of __getOwnPropSymbols$1(t))__propIsEnum$1.call(t,o)&&__defNormalProp$1(e,o,t[o]);return e},__async$2=(e,t,o)=>new Promise((n,s)=>{var c=r=>{try{a(o.next(r))}catch(i){s(i)}},l=r=>{try{a(o.throw(r))}catch(i){s(i)}},a=r=>r.done?n(r.value):Promise.resolve(r.value).then(c,l);a((o=o.apply(e,t)).next())});const queryWithAccessToken=(e,t)=>{const{region:o,endpoint:n,options:s}=e,{headers:c,params:l,timeout:a}=s;if(!endpointValidator(n))throw new RangeError(`${n} is not a valid endpoint.`);const d=`${getApiHostByRegion(o)}${n}`,u={Authorization:`Bearer ${t}`},f=__objSpread$1(__objSpread$1({},c),u);return fetchFromUri(__objSpread$1(__objSpread$1({uri:d,method:"GET",headers:f},l&&{params:l}),a&&{timeout:a}))},query=e=>__async$2(this,null,function*(){const{region:t,accessToken:o}=e,{validateAccessTokenOnEachQuery:n,refreshExpiredAccessToken:s,onAccessTokenExpired:c,onAccessTokenRefresh:l}=e.options;if(n&&!(yield validateAccessToken(t,o)))return{error:"access_token_invalid"};try{return yield queryWithAccessToken(e,o)}catch(a){if(a.response&&a.response.status===401){if(c==null||c(),s){const r=yield getAccessToken(e);return l==null||l(r),queryWithAccessToken(e,r)}return Promise.resolve({error:"access_token_invalid"})}throw a}});class OAuth2API{constructor(t,o){this.clientId=t,this.clientSecret=o}}var __async$1=(e,t,o)=>new Promise((n,s)=>{var c=r=>{try{a(o.next(r))}catch(i){s(i)}},l=r=>{try{a(o.throw(r))}catch(i){s(i)}},a=r=>r.done?n(r.value):Promise.resolve(r.value).then(c,l);a((o=o.apply(e,t)).next())});class BattleNetAPI extends OAuth2API{constructor(t){super(t.clientId,t.clientSecret);this.getAccessToken=()=>this.accessToken||this.setAccessToken(),this.setAccessToken=()=>__async$1(this,null,function*(){return this.accessToken=yield getAccessToken({region:this.region,clientId:this.clientId,clientSecret:this.clientSecret}),this.accessToken}),this.region=t.region,this.accessToken=t.accessToken||void 0}}BattleNetAPI.validateAccessToken=(e,t)=>validateAccessToken(e,t);var __defProp=Object.defineProperty,__hasOwnProp=Object.prototype.hasOwnProperty,__getOwnPropSymbols=Object.getOwnPropertySymbols,__propIsEnum=Object.prototype.propertyIsEnumerable,__defNormalProp=(e,t,o)=>t in e?__defProp(e,t,{enumerable:!0,configurable:!0,writable:!0,value:o}):e[t]=o,__objSpread=(e,t)=>{for(var o in t||(t={}))__hasOwnProp.call(t,o)&&__defNormalProp(e,o,t[o]);if(__getOwnPropSymbols)for(var o of __getOwnPropSymbols(t))__propIsEnum.call(t,o)&&__defNormalProp(e,o,t[o]);return e},__async=(e,t,o)=>new Promise((n,s)=>{var c=r=>{try{a(o.next(r))}catch(i){s(i)}},l=r=>{try{a(o.throw(r))}catch(i){s(i)}},a=r=>r.done?n(r.value):Promise.resolve(r.value).then(c,l);a((o=o.apply(e,t)).next())});class BlizzAPI extends BattleNetAPI{constructor(t){super({region:t.region,clientId:t.clientId,clientSecret:t.clientSecret,accessToken:t.accessToken});this.query=(o,n)=>__async(this,null,function*(){return query({endpoint:o,region:this.region,clientId:this.clientId,clientSecret:this.clientSecret,accessToken:yield this.getAccessToken(),options:__objSpread(__objSpread({},this.options),n)})}),this.options={validateAccessTokenOnEachQuery:t.validateAccessTokenOnEachQuery||!1,refreshExpiredAccessToken:t.refreshExpiredAccessToken||!1,onAccessTokenExpired:t.onAccessTokenExpired||void 0,onAccessTokenRefresh:t.onAccessTokenRefresh||void 0}}}BlizzAPI.getAllRegions=getAllRegions,BlizzAPI.getAllRegionIds=getAllRegionIds,BlizzAPI.getAllRegionNames=getAllRegionNames,BlizzAPI.getRegionNameById=getRegionNameById,BlizzAPI.validateRegionId=validateRegionId,BlizzAPI.getRegionIdByName=getRegionIdByName,BlizzAPI.validateRegionName=validateRegionName,BlizzAPI.getAllLocales=getAllLocales,BlizzAPI.getAllLocaleNames=getAllLocaleNames,BlizzAPI.getLocalesByRegionId=getLocalesByRegionId,BlizzAPI.checkIfLocaleLooksValid=checkIfLocaleLooksValid,BlizzAPI.validateLocale=validateLocale,BlizzAPI.isLocaleValidForRegionId=isLocaleValidForRegionId,BlizzAPI.getAllSc2Realms=getAllSc2Realms,BlizzAPI.getAllAvailableSc2Realms=getAllAvailableSc2Realms,BlizzAPI.getSc2RealmsByRegionId=getSc2RealmsByRegionId,BlizzAPI.checkIfSc2RealmLooksValid=checkIfSc2RealmLooksValid,BlizzAPI.validateSc2Realm=validateSc2Realm,BlizzAPI.isSc2RealmValidForRegionId=isSc2RealmValidForRegionId,BlizzAPI.getDefaultLocaleNameForRegionId=getDefaultLocaleNameForRegionId,BlizzAPI.getAllDefaultLocaleNames=getAllDefaultLocaleNames,exports.BlizzAPI=BlizzAPI;
