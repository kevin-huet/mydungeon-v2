declare type Uri = string;
declare type ConstantKey = 'REGIONS' | 'LOCALES' | 'DEFAULT_LOCALES' | 'REGION_API_HOSTS' | 'SC2_REALMS' | 'OAUTH_AUTHORIZE_URIS' | 'OAUTH_TOKEN_URIS' | 'OAUTH_CHECK_TOKEN_URIS';
declare type ConstantKeys = ReadonlyArray<ConstantKey>;
declare type RegionId = number;
declare type RegionIdKey = string;
declare type RegionIdAsNumberOrString = RegionId | RegionIdKey;
declare type RegionIdArray = ReadonlyArray<RegionId>;
declare type RegionName = string;
declare type RegionNameArray = ReadonlyArray<RegionName>;
declare type Locale = string;
declare type LocaleArray = ReadonlyArray<Locale>;
declare type DefaultLocaleIndex = number;
declare type DefaultLocaleIndexArray = ReadonlyArray<DefaultLocaleIndex>;
declare type Sc2Realm = number;
declare type Sc2RealmArray = ReadonlyArray<Sc2Realm>;
declare type Sc2RealmList = ReadonlyArray<Sc2Realm>;
declare type Sc2RealmAsNumberOrString = Sc2Realm | string;
declare type RegionIdOrName = RegionId | RegionName;
declare type MaybeRegion = RegionIdOrName | undefined;
declare type ClientId = string;
declare type ClientSecret = string;
declare type AccessToken = string | undefined;
declare type Endpoint = string;
declare type HttpMethod = 'GET' | 'POST';
declare type ValidatorFunction = (endpoint: Endpoint) => boolean;
interface AccessTokenOptions {
    validateAccessTokenOnEachQuery?: boolean;
    refreshExpiredAccessToken?: boolean;
    onAccessTokenExpired?: Function | undefined;
    onAccessTokenRefresh?: Function | undefined;
}
interface QueryOptions {
    timeout?: number;
    headers?: object | Headers;
    params?: object | URLSearchParams;
}
interface BattleNetOptions {
    region: RegionIdOrName;
    clientId: ClientId;
    clientSecret: ClientSecret;
    accessToken?: AccessToken;
}
interface InitOptions {
    region: string | number;
    clientId?: string;
    clientSecret?: string;
    accessToken?: string;
    validateAccessTokenOnEachQuery?: boolean;
    revalidateAccessTokenIfExpired?: boolean;
    onAccessTokenExpire?: Function | undefined;
    onAccessTokenRevalidate?: Function | undefined;
}
interface RegionIdProperties<Value> {
    readonly [regionId: string]: Value;
}
interface BlizzAPIOptions extends BattleNetOptions, AccessTokenOptions {
}

declare abstract class OAuth2API {
    readonly clientId: ClientId;
    readonly clientSecret: ClientSecret;
    constructor(clientId: ClientId, clientSecret: ClientSecret);
}

declare abstract class BattleNetAPI extends OAuth2API {
    readonly region: RegionIdOrName;
    accessToken: AccessToken;
    constructor(options: BattleNetOptions);
    getAccessToken: () => string | Promise<string>;
    setAccessToken: () => Promise<string>;
    static validateAccessToken: (region: RegionIdOrName, accessToken: AccessToken) => Promise<boolean>;
}

declare class BlizzAPI extends BattleNetAPI {
    readonly options: AccessTokenOptions;
    constructor(options: BlizzAPIOptions);
    query: (endpoint: Endpoint, options?: QueryOptions | undefined) => Promise<any>;
    static getAllRegions: () => RegionIdProperties<RegionNameArray>;
    static getAllRegionIds: () => RegionIdArray;
    static getAllRegionNames: () => string[];
    static getRegionNameById: (regionId: RegionIdAsNumberOrString) => RegionNameArray;
    static validateRegionId: (regionId: RegionIdAsNumberOrString) => boolean;
    static getRegionIdByName: (regionName: string) => number;
    static validateRegionName: (regionName: string) => boolean;
    static getAllLocales: () => RegionIdProperties<LocaleArray>;
    static getAllLocaleNames: () => string[];
    static getLocalesByRegionId: (regionId: RegionIdAsNumberOrString) => LocaleArray;
    static checkIfLocaleLooksValid: (locale: string) => boolean;
    static validateLocale: (locale: string) => boolean;
    static isLocaleValidForRegionId: (locale: string, regionId: RegionIdAsNumberOrString) => boolean;
    static getAllSc2Realms: () => RegionIdProperties<Sc2RealmArray>;
    static getAllAvailableSc2Realms: () => Sc2RealmList;
    static getSc2RealmsByRegionId: (regionId: RegionIdAsNumberOrString) => Sc2RealmList;
    static checkIfSc2RealmLooksValid: (sc2Realm: Sc2RealmAsNumberOrString) => boolean;
    static validateSc2Realm: (sc2Realm: Sc2RealmAsNumberOrString) => boolean;
    static isSc2RealmValidForRegionId: (sc2Realm: Sc2RealmAsNumberOrString, regionId: RegionIdAsNumberOrString) => boolean;
    static getDefaultLocaleNameForRegionId: (regionId: RegionIdAsNumberOrString) => string;
    static getAllDefaultLocaleNames: () => RegionIdProperties<string>;
}

export { AccessToken, AccessTokenOptions, BattleNetOptions, BlizzAPI, BlizzAPIOptions, ClientId, ClientSecret, ConstantKey, ConstantKeys, DefaultLocaleIndex, DefaultLocaleIndexArray, Endpoint, HttpMethod, InitOptions, Locale, LocaleArray, MaybeRegion, QueryOptions, RegionId, RegionIdArray, RegionIdAsNumberOrString, RegionIdKey, RegionIdOrName, RegionIdProperties, RegionName, RegionNameArray, Sc2Realm, Sc2RealmArray, Sc2RealmAsNumberOrString, Sc2RealmList, Uri, ValidatorFunction };
